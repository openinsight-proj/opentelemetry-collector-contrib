// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/config/configtelemetry"
)

// Deprecated: [v0.108.0] use LeveledMeter instead.
func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/open-telemetry/opentelemetry-collector-contrib/connector/tracedurationconnector")
}

func LeveledMeter(settings component.TelemetrySettings, level configtelemetry.Level) metric.Meter {
	return settings.LeveledMeterProvider(level).Meter("github.com/open-telemetry/opentelemetry-collector-contrib/connector/tracedurationconnector")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/open-telemetry/opentelemetry-collector-contrib/connector/tracedurationconnector")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                                   metric.Meter
	ConnectorGroupbytraceConfNumTraces      metric.Int64Gauge
	ConnectorGroupbytraceEventLatency       metric.Int64Histogram
	ConnectorGroupbytraceIncompleteReleases metric.Int64Counter
	ConnectorGroupbytraceNumEventsInQueue   metric.Int64Gauge
	ConnectorGroupbytraceNumTracesInMemory  metric.Int64Gauge
	ConnectorGroupbytraceSpansReleased      metric.Int64Counter
	ConnectorGroupbytraceTracesEvicted      metric.Int64Counter
	ConnectorGroupbytraceTracesReleased     metric.Int64Counter
	meters                                  map[configtelemetry.Level]metric.Meter
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
	tbof(mb)
}

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{meters: map[configtelemetry.Level]metric.Meter{}}
	for _, op := range options {
		op.apply(&builder)
	}
	builder.meters[configtelemetry.LevelBasic] = LeveledMeter(settings, configtelemetry.LevelBasic)
	var err, errs error
	builder.ConnectorGroupbytraceConfNumTraces, err = builder.meters[configtelemetry.LevelBasic].Int64Gauge(
		"otelcol_connector_groupbytrace_conf_num_traces",
		metric.WithDescription("Maximum number of traces to hold in the internal storage"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceEventLatency, err = builder.meters[configtelemetry.LevelBasic].Int64Histogram(
		"otelcol_connector_groupbytrace_event_latency",
		metric.WithDescription("How long the queue events are taking to be processed"),
		metric.WithUnit("ms"),
		metric.WithExplicitBucketBoundaries([]float64{5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000}...),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceIncompleteReleases, err = builder.meters[configtelemetry.LevelBasic].Int64Counter(
		"otelcol_connector_groupbytrace_incomplete_releases",
		metric.WithDescription("Releases that are suspected to have been incomplete"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceNumEventsInQueue, err = builder.meters[configtelemetry.LevelBasic].Int64Gauge(
		"otelcol_connector_groupbytrace_num_events_in_queue",
		metric.WithDescription("Number of events currently in the queue"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceNumTracesInMemory, err = builder.meters[configtelemetry.LevelBasic].Int64Gauge(
		"otelcol_connector_groupbytrace_num_traces_in_memory",
		metric.WithDescription("Number of traces currently in the in-memory storage"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceSpansReleased, err = builder.meters[configtelemetry.LevelBasic].Int64Counter(
		"otelcol_connector_groupbytrace_spans_released",
		metric.WithDescription("Spans released to the next consumer"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceTracesEvicted, err = builder.meters[configtelemetry.LevelBasic].Int64Counter(
		"otelcol_connector_groupbytrace_traces_evicted",
		metric.WithDescription("Traces evicted from the internal buffer"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ConnectorGroupbytraceTracesReleased, err = builder.meters[configtelemetry.LevelBasic].Int64Counter(
		"otelcol_connector_groupbytrace_traces_released",
		metric.WithDescription("Traces released to the next consumer"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}
